{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","API/API.js","components/Navbar/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","axios","get","Navbar","type","placeholder","onChange","search","Table","useState","users","setUsers","searchedUsers","setSearchedUsers","setSort","useEffect","API","then","results","data","e","filter","target","value","console","log","SearchedUserList","item","Object","values","join","toLowerCase","indexOf","map","login","name","picture","phone","email","dob","key","uuid","alt","src","thumbnail","first","last","age","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAWeA,MARf,SAAiBC,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,WCKJC,EATA,WACX,OACI,6BACI,mD,wBCHG,EACD,WACN,OAAOC,IAAMC,IAAI,kDCiBVC,G,YAlBA,SAACN,GAEZ,OACI,yBAAKC,UAAU,UAEX,6BACI,0BAAMA,UAAU,eACZ,2BACIA,UAAU,eACVM,KAAK,SACLC,YAAY,SACZC,SAAUT,EAAMU,cCkDzBC,EA1DD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAE0BF,mBAAS,IAFnC,mBAETG,EAFS,KAEMC,EAFN,OAGQJ,mBAAS,IAHjB,mBAGHK,GAHG,WAKhBC,qBAAU,WACNC,IAAeC,MAAK,SAAAC,GAChBP,EAASO,EAAQC,KAAKD,SACtBL,EAAiBK,EAAQC,KAAKD,cAEnC,CAACJ,IAaJ,OACI,6BAEI,kBAAC,EAAD,CAAKP,OAdE,SAACa,GACZ,IAAMC,EAASD,EAAEE,OAAOC,MACxBC,QAAQC,IAAIJ,GACZ,IAAMK,EAAmBhB,EAAMW,QAAO,SAAAM,GAElC,OAAiD,IADpCC,OAAOC,OAAOF,GAAMG,KAAK,IAAIC,cAC5BC,QAAQX,EAAOU,kBAEjCP,QAAQC,IAAIC,GACZb,EAAiBa,MAQb,yBAAK5B,UAAU,OACVc,EAAcqB,KAAI,YAAkD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtD,OACI,yBAAKzC,UAAU,YACX,yBAAKA,UAAU,QACX,wBAAI0C,IAAKN,EAAMO,MAEX,yBAAK3C,UAAU,MAAM4C,IAAKP,EAAMQ,IAAKP,EAAQQ,YAE7C,yBAAK9C,UAAU,aACX,yCADJ,IAC4BqC,EAAKU,MADjC,IACyCV,EAAKW,KAAK,6BAC/C,0CAFJ,IAE6BR,EAAM,6BAC/B,0CAHJ,IAG6BD,EAAM,6BAC/B,wCAJJ,IAI2BE,EAAIQ,WAbvD,O,MChBGC,MAXf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.176d5dd6.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return (\n        <div className='wrapper'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div>\n            <h1>Company Directory</h1>\n        </div>\n    )\n\n}\n\nexport default Header;","import axios from 'axios';\n\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React from 'react';\nimport \"./style.css\"\n\nconst Navbar = (props) => {\n\n    return (\n        <nav className=\"navbar\">\n\n            <div>\n                <form className=\"form-inline\">\n                    <input\n                        className=\"form-control\"\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        onChange={props.search}\n                    />\n                </form>\n            </div>\n        </nav>\n    )\n}\nexport default Navbar;\n","import React, { useState, useEffect } from 'react';\nimport API from '../../API/API';\nimport \"./style.css\"\nimport Nav from '../Navbar';\n\n\nconst Table = () => {\n    const [users, setUsers] = useState([]);\n    const [searchedUsers, setSearchedUsers] = useState([]);\n    const [sort, setSort] = useState('');\n\n    useEffect(() => {\n        API.getUsers().then(results => {\n            setUsers(results.data.results)\n            setSearchedUsers(results.data.results)\n        })\n    }, [setSort]);\n\n    const search = (e) => {\n        const filter = e.target.value;\n        console.log(filter);\n        const SearchedUserList = users.filter(item => {\n            let values = Object.values(item).join(\"\").toLowerCase();\n            return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n        console.log(SearchedUserList);\n        setSearchedUsers(SearchedUserList);\n    }\n\n    return (\n        <div>\n\n            <Nav search={search} />\n\n            <div className=\"row\">\n                {searchedUsers.map(({ login, name, picture, phone, email, dob }) => {\n                    return (\n                        <div className=\"col-lg-3\">\n                            <div className=\"card\">\n                                <tr key={login.uuid}>\n\n                                    <img className=\"img\" alt={name} src={picture.thumbnail} />\n\n                                    <div className=\"card-text\">\n                                        <strong>Name:</strong> {name.first} {name.last}<br />\n                                        <strong>Email:</strong> {email}<br />\n                                        <strong>Phone:</strong> {phone}<br />\n                                        <strong>Age:</strong> {dob.age}\n\n                                    </div>\n                                </tr>\n                            </div>\n                        </div>\n                    );\n                })};\n        </div>\n\n        </div >\n\n    );\n}\n\n\n\nexport default Table;","import React from 'react';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport Table from './components/Table';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Wrapper>\n        <Header />\n        <Table />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}